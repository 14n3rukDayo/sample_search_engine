// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/labstack/echo/v4"
	"main/application/query"
	"main/application/service"
	"main/application/usecase"
	"main/config"
	factory4 "main/domain/document/factory"
	factory2 "main/domain/document/valueobject/tokens/factory"
	factory3 "main/domain/document/valueobject/tokenscore/factory"
	"main/domain/invertedindex/factory"
	"main/infrastructure/factory"
	"main/infrastructure/repository"
	"main/presentation/handler"
	"main/router"
)

// Injectors from wire.go:

func InitializeEcho() (*echo.Echo, error) {
	redisClient := config.NewRedisClient()
	document := irepository.NewDocumentRepository(redisClient)
	invertedIndex := factory.NewInvertedIndexFactory()
	repositoryInvertedIndex := irepository.NewInvertedIndexRepository(redisClient)
	serviceDocument := service.NewDocumentService(document, invertedIndex, repositoryInvertedIndex)
	tokenizer := ifactory.NewTokenizer()
	aliases := config.CreateAliases()
	synonym := irepository.NewSynonumRepository(aliases)
	tokens := factory2.NewTokensFactory(tokenizer, document, synonym)
	tokenScore := factory3.NewTokenScoreFactory(document, repositoryInvertedIndex)
	factoryDocument := factory4.NewDocumentFactory(document, tokens, tokenScore)
	addDocument := usecase.NewAddDocumentUsecase(serviceDocument, factoryDocument)
	handlerDocument := handler.NewDocumentHandler(addDocument)
	searcher := query.NewSearcher(repositoryInvertedIndex, document, tokens)
	searchDocument := usecase.NewSearchDocument(searcher)
	handlerSearcher := handler.NewSearchHandler(searchDocument)
	echoEcho := router.NewEchoInstance(handlerDocument, handlerSearcher)
	return echoEcho, nil
}
